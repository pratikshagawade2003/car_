# -*- coding: utf-8 -*-
"""Pratiksha.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YGbN_wphEYx5lu41Bs1s-jD3JwaPOxWz
"""

# Import Dataset
import pandas as pd
df = pd.read_csv("/car.csv")
df.head()

# Find Missing Values
df.shape
df.info()
df.isnull()

df.describe()

# Create a copy to encode
df_encoded = df.copy()

# Initialize label encoders and apply to each column
label_encoders = {}
for col in df_encoded.columns:
    le = LabelEncoder()
    df_encoded[col] = le.fit_transform(df_encoded[col])
    label_encoders[col] = le

# Preview the encoded data
print(df_encoded.head())

#Data Visualisation

import matplotlib.pyplot as plt
import seaborn as sns

# Use df instead of df_cleaned
plt.figure(figsize=(6, 4))
sns.countplot(x='class', data=df, order=df['class'].value_counts().index,palette='dark')
plt.title('Distribution of Car Acceptability (Target Class)')
plt.xlabel('Class')
plt.ylabel('Count')
plt.show()

plt.figure(figsize=(10, 6))
sns.heatmap(df_encoded.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap (Encoded Features)")
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.preprocessing import LabelEncoder

# Features and target
X = df_encoded.drop('class', axis=1)
y = df_encoded['class']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluation metrics
print("Accuracy Score:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Feature importances
importances = model.feature_importances_
feature_names = X.columns

# Plot
plt.figure(figsize=(8, 4))
sns.barplot(x=importances, y=feature_names)
plt.title('Feature Importances')
plt.show()

