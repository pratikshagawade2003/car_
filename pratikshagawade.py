# -*- coding: utf-8 -*-
"""Pratikshagawade.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hXwBJkxdeY0qmc3mMOBSXp-ACw4CrpEN
"""

!pip install streamlit

import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# App Title
st.title("üöó Car Evaluation Classifier using Random Forest & Streamlit")
st.write("Predict the car condition using Machine Learning based on various features.")
st.markdown("üë©‚Äçüíª Made by: Pratiksha")

# File uploader
uploaded_file = st.file_uploader("car.csv(or use default UCI dataset)", type=['csv'])

@st.cache_data
def load_data():
    url = "https://archive.ics.uci.edu/ml/machine-learning-databases/car/car.data"
    columns = ['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'class']
    return pd.read_csv(url, names=columns)

# Use uploaded file if available
if uploaded_file is not None:
    try:
        df = pd.read_csv(uploaded_file)
        if df.shape[1] != 7:
            st.error("‚ùå Uploaded file must have exactly 7 columns.")
            st.stop()
        df.columns = ['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'class']
    except Exception as e:
        st.error(f"Error reading file: {e}")
        st.stop()
else:
    df = load_data()

# Encode categorical columns
df_encoded = df.apply(lambda col: pd.factorize(col)[0])

# Splitting data
X = df_encoded.iloc[:, :-1]
y = df_encoded.iloc[:, -1]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Accuracy
accuracy = model.score(X_test, y_test)
st.success(f"üéØ Model Accuracy: {accuracy*100:.2f}%")

# Prediction UI
st.subheader("üß™ Predict Car Condition")

input_data = []
for column in df.columns[:-1]:
    value = st.selectbox(f"{column.capitalize()}", sorted(df[column].unique()))
    input_data.append(value)

# Encode input data manually
input_encoded = []
for col_name, val in zip(df.columns[:-1], input_data):
    categories = df[col_name].unique().tolist()
    encoded_val = categories.index(val)
    input_encoded.append(encoded_val)

# Predict
prediction_encoded = model.predict([input_encoded])[0]

# Decode prediction
label_map = pd.factorize(df['class'])[1]  # This keeps label order consistent
predicted_label = label_map[prediction_encoded]

st.success(f"‚úÖ Predicted Condition: **{predicted_label}**")

st.markdown("‚ù§ **Made with love by Pratiksha**")



